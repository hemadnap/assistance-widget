stages:
  - build
  - deploy

# Build the project
build:
  stage: build
  image: node:16 # Use a Node.js image
  script:
    - npm install
    - npm run build
  artifacts:
    paths:
      - dist/ # Save the build output for the next stage

# Build and push Docker image
docker-build:
  stage: deploy
  image: docker:latest
  services:
    - docker:dind
  variables:
    DOCKER_DRIVER: overlay2
  before_script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin "$CI_REGISTRY"
  script:
    - echo "Logging into the docker repo => docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY"
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker info
    - echo "Building the docker image using => docker build --build-arg http_proxy=$HTTP_PROXY --build-arg https_proxy=$HTTPS_PROXY -t $CI_REGISTRY_IMAGE ."
    - docker build --build-arg http_proxy=$HTTP_PROXY --build-arg https_proxy=$HTTPS_PROXY -t $CI_REGISTRY_IMAGE .
    - echo "Pushing the docker image to the docker repo using => docker push $CI_REGISTRY_IMAGE"
    - docker push $CI_REGISTRY_IMAGE
  only:
    - master

# Deploy Docker container
docker-deploy:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache sshpass
  script:
    - export HTTPS_PROXY="$HTTPS_PROXY"
    - echo "HTTPS_PROXY=$HTTPS_PROXY"
    - echo "DATASOURCE_PASSWORD=$DATASOURCE_PASSWORD"
    - echo "Login to openshift using => oc login --token=$OPENSHIFT_TOKEN --server=$OPENSHIFT_SERVER"
  only:
    - master
